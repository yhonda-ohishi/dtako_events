// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: dtako_events.proto

package dtako

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DtakoEventService_GetDTakoEvent_FullMethodName              = "/dtako.DtakoEventService/GetDTakoEvent"
	DtakoEventService_ListDTakoEventsByUnkoNo_FullMethodName    = "/dtako.DtakoEventService/ListDTakoEventsByUnkoNo"
	DtakoEventService_AggregateDTakoEventsByType_FullMethodName = "/dtako.DtakoEventService/AggregateDTakoEventsByType"
)

// DtakoEventServiceClient is the client API for DtakoEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DtakoEventサービス - イベントデータの管理
type DtakoEventServiceClient interface {
	// イベント参照
	GetDTakoEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	ListDTakoEventsByUnkoNo(ctx context.Context, in *GetByUnkoNoRequest, opts ...grpc.CallOption) (*GetByUnkoNoResponse, error)
	// 集計
	AggregateDTakoEventsByType(ctx context.Context, in *AggregateByEventTypeRequest, opts ...grpc.CallOption) (*AggregateByEventTypeResponse, error)
}

type dtakoEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtakoEventServiceClient(cc grpc.ClientConnInterface) DtakoEventServiceClient {
	return &dtakoEventServiceClient{cc}
}

func (c *dtakoEventServiceClient) GetDTakoEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, DtakoEventService_GetDTakoEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) ListDTakoEventsByUnkoNo(ctx context.Context, in *GetByUnkoNoRequest, opts ...grpc.CallOption) (*GetByUnkoNoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByUnkoNoResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_ListDTakoEventsByUnkoNo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) AggregateDTakoEventsByType(ctx context.Context, in *AggregateByEventTypeRequest, opts ...grpc.CallOption) (*AggregateByEventTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregateByEventTypeResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_AggregateDTakoEventsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtakoEventServiceServer is the server API for DtakoEventService service.
// All implementations must embed UnimplementedDtakoEventServiceServer
// for forward compatibility.
//
// DtakoEventサービス - イベントデータの管理
type DtakoEventServiceServer interface {
	// イベント参照
	GetDTakoEvent(context.Context, *GetEventRequest) (*Event, error)
	ListDTakoEventsByUnkoNo(context.Context, *GetByUnkoNoRequest) (*GetByUnkoNoResponse, error)
	// 集計
	AggregateDTakoEventsByType(context.Context, *AggregateByEventTypeRequest) (*AggregateByEventTypeResponse, error)
	mustEmbedUnimplementedDtakoEventServiceServer()
}

// UnimplementedDtakoEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtakoEventServiceServer struct{}

func (UnimplementedDtakoEventServiceServer) GetDTakoEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDTakoEvent not implemented")
}
func (UnimplementedDtakoEventServiceServer) ListDTakoEventsByUnkoNo(context.Context, *GetByUnkoNoRequest) (*GetByUnkoNoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDTakoEventsByUnkoNo not implemented")
}
func (UnimplementedDtakoEventServiceServer) AggregateDTakoEventsByType(context.Context, *AggregateByEventTypeRequest) (*AggregateByEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateDTakoEventsByType not implemented")
}
func (UnimplementedDtakoEventServiceServer) mustEmbedUnimplementedDtakoEventServiceServer() {}
func (UnimplementedDtakoEventServiceServer) testEmbeddedByValue()                           {}

// UnsafeDtakoEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtakoEventServiceServer will
// result in compilation errors.
type UnsafeDtakoEventServiceServer interface {
	mustEmbedUnimplementedDtakoEventServiceServer()
}

func RegisterDtakoEventServiceServer(s grpc.ServiceRegistrar, srv DtakoEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedDtakoEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DtakoEventService_ServiceDesc, srv)
}

func _DtakoEventService_GetDTakoEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).GetDTakoEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_GetDTakoEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).GetDTakoEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_ListDTakoEventsByUnkoNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUnkoNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).ListDTakoEventsByUnkoNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_ListDTakoEventsByUnkoNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).ListDTakoEventsByUnkoNo(ctx, req.(*GetByUnkoNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_AggregateDTakoEventsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateByEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).AggregateDTakoEventsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_AggregateDTakoEventsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).AggregateDTakoEventsByType(ctx, req.(*AggregateByEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtakoEventService_ServiceDesc is the grpc.ServiceDesc for DtakoEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtakoEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtako.DtakoEventService",
	HandlerType: (*DtakoEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDTakoEvent",
			Handler:    _DtakoEventService_GetDTakoEvent_Handler,
		},
		{
			MethodName: "ListDTakoEventsByUnkoNo",
			Handler:    _DtakoEventService_ListDTakoEventsByUnkoNo_Handler,
		},
		{
			MethodName: "AggregateDTakoEventsByType",
			Handler:    _DtakoEventService_AggregateDTakoEventsByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dtako_events.proto",
}
