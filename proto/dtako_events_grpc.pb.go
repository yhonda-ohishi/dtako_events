// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/dtako_events.proto

package dtako

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DtakoEventService_CreateEvent_FullMethodName       = "/dtako.DtakoEventService/CreateEvent"
	DtakoEventService_GetEvent_FullMethodName          = "/dtako.DtakoEventService/GetEvent"
	DtakoEventService_UpdateEvent_FullMethodName       = "/dtako.DtakoEventService/UpdateEvent"
	DtakoEventService_DeleteEvent_FullMethodName       = "/dtako.DtakoEventService/DeleteEvent"
	DtakoEventService_ListEvents_FullMethodName        = "/dtako.DtakoEventService/ListEvents"
	DtakoEventService_FindEmptyLocation_FullMethodName = "/dtako.DtakoEventService/FindEmptyLocation"
	DtakoEventService_SearchByDateRange_FullMethodName = "/dtako.DtakoEventService/SearchByDateRange"
	DtakoEventService_SearchByDriver_FullMethodName    = "/dtako.DtakoEventService/SearchByDriver"
	DtakoEventService_SetLocationByGeo_FullMethodName  = "/dtako.DtakoEventService/SetLocationByGeo"
	DtakoEventService_SetGeoCode_FullMethodName        = "/dtako.DtakoEventService/SetGeoCode"
)

// DtakoEventServiceClient is the client API for DtakoEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DtakoEventサービス - イベントデータの管理
type DtakoEventServiceClient interface {
	// イベント基本操作
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// 検索・フィルタリング
	FindEmptyLocation(ctx context.Context, in *FindEmptyLocationRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	SearchByDateRange(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	SearchByDriver(ctx context.Context, in *DriverSearchRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// 位置情報処理
	SetLocationByGeo(ctx context.Context, in *SetLocationRequest, opts ...grpc.CallOption) (*SetLocationResponse, error)
	SetGeoCode(ctx context.Context, in *SetGeoCodeRequest, opts ...grpc.CallOption) (*SetGeoCodeResponse, error)
}

type dtakoEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtakoEventServiceClient(cc grpc.ClientConnInterface) DtakoEventServiceClient {
	return &dtakoEventServiceClient{cc}
}

func (c *dtakoEventServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, DtakoEventService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, DtakoEventService_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, DtakoEventService_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) FindEmptyLocation(ctx context.Context, in *FindEmptyLocationRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_FindEmptyLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) SearchByDateRange(ctx context.Context, in *DateRangeRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_SearchByDateRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) SearchByDriver(ctx context.Context, in *DriverSearchRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_SearchByDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) SetLocationByGeo(ctx context.Context, in *SetLocationRequest, opts ...grpc.CallOption) (*SetLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLocationResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_SetLocationByGeo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoEventServiceClient) SetGeoCode(ctx context.Context, in *SetGeoCodeRequest, opts ...grpc.CallOption) (*SetGeoCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGeoCodeResponse)
	err := c.cc.Invoke(ctx, DtakoEventService_SetGeoCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtakoEventServiceServer is the server API for DtakoEventService service.
// All implementations must embed UnimplementedDtakoEventServiceServer
// for forward compatibility.
//
// DtakoEventサービス - イベントデータの管理
type DtakoEventServiceServer interface {
	// イベント基本操作
	CreateEvent(context.Context, *CreateEventRequest) (*Event, error)
	GetEvent(context.Context, *GetEventRequest) (*Event, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*Event, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// 検索・フィルタリング
	FindEmptyLocation(context.Context, *FindEmptyLocationRequest) (*ListEventsResponse, error)
	SearchByDateRange(context.Context, *DateRangeRequest) (*ListEventsResponse, error)
	SearchByDriver(context.Context, *DriverSearchRequest) (*ListEventsResponse, error)
	// 位置情報処理
	SetLocationByGeo(context.Context, *SetLocationRequest) (*SetLocationResponse, error)
	SetGeoCode(context.Context, *SetGeoCodeRequest) (*SetGeoCodeResponse, error)
	mustEmbedUnimplementedDtakoEventServiceServer()
}

// UnimplementedDtakoEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtakoEventServiceServer struct{}

func (UnimplementedDtakoEventServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedDtakoEventServiceServer) GetEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedDtakoEventServiceServer) UpdateEvent(context.Context, *UpdateEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedDtakoEventServiceServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedDtakoEventServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedDtakoEventServiceServer) FindEmptyLocation(context.Context, *FindEmptyLocationRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEmptyLocation not implemented")
}
func (UnimplementedDtakoEventServiceServer) SearchByDateRange(context.Context, *DateRangeRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByDateRange not implemented")
}
func (UnimplementedDtakoEventServiceServer) SearchByDriver(context.Context, *DriverSearchRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByDriver not implemented")
}
func (UnimplementedDtakoEventServiceServer) SetLocationByGeo(context.Context, *SetLocationRequest) (*SetLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocationByGeo not implemented")
}
func (UnimplementedDtakoEventServiceServer) SetGeoCode(context.Context, *SetGeoCodeRequest) (*SetGeoCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGeoCode not implemented")
}
func (UnimplementedDtakoEventServiceServer) mustEmbedUnimplementedDtakoEventServiceServer() {}
func (UnimplementedDtakoEventServiceServer) testEmbeddedByValue()                           {}

// UnsafeDtakoEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtakoEventServiceServer will
// result in compilation errors.
type UnsafeDtakoEventServiceServer interface {
	mustEmbedUnimplementedDtakoEventServiceServer()
}

func RegisterDtakoEventServiceServer(s grpc.ServiceRegistrar, srv DtakoEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedDtakoEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DtakoEventService_ServiceDesc, srv)
}

func _DtakoEventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_FindEmptyLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEmptyLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).FindEmptyLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_FindEmptyLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).FindEmptyLocation(ctx, req.(*FindEmptyLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_SearchByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).SearchByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_SearchByDateRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).SearchByDateRange(ctx, req.(*DateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_SearchByDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).SearchByDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_SearchByDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).SearchByDriver(ctx, req.(*DriverSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_SetLocationByGeo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).SetLocationByGeo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_SetLocationByGeo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).SetLocationByGeo(ctx, req.(*SetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoEventService_SetGeoCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGeoCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoEventServiceServer).SetGeoCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoEventService_SetGeoCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoEventServiceServer).SetGeoCode(ctx, req.(*SetGeoCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtakoEventService_ServiceDesc is the grpc.ServiceDesc for DtakoEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtakoEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtako.DtakoEventService",
	HandlerType: (*DtakoEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _DtakoEventService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _DtakoEventService_GetEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _DtakoEventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _DtakoEventService_DeleteEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _DtakoEventService_ListEvents_Handler,
		},
		{
			MethodName: "FindEmptyLocation",
			Handler:    _DtakoEventService_FindEmptyLocation_Handler,
		},
		{
			MethodName: "SearchByDateRange",
			Handler:    _DtakoEventService_SearchByDateRange_Handler,
		},
		{
			MethodName: "SearchByDriver",
			Handler:    _DtakoEventService_SearchByDriver_Handler,
		},
		{
			MethodName: "SetLocationByGeo",
			Handler:    _DtakoEventService_SetLocationByGeo_Handler,
		},
		{
			MethodName: "SetGeoCode",
			Handler:    _DtakoEventService_SetGeoCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dtako_events.proto",
}
