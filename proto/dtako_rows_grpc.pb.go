// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/dtako_rows.proto

package dtako

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DtakoRowService_GetRowDetail_FullMethodName   = "/dtako.DtakoRowService/GetRowDetail"
	DtakoRowService_CreateRow_FullMethodName      = "/dtako.DtakoRowService/CreateRow"
	DtakoRowService_GetRow_FullMethodName         = "/dtako.DtakoRowService/GetRow"
	DtakoRowService_UpdateRow_FullMethodName      = "/dtako.DtakoRowService/UpdateRow"
	DtakoRowService_DeleteRow_FullMethodName      = "/dtako.DtakoRowService/DeleteRow"
	DtakoRowService_ListRows_FullMethodName       = "/dtako.DtakoRowService/ListRows"
	DtakoRowService_SearchRows_FullMethodName     = "/dtako.DtakoRowService/SearchRows"
	DtakoRowService_SearchByShaban_FullMethodName = "/dtako.DtakoRowService/SearchByShaban"
)

// DtakoRowServiceClient is the client API for DtakoRowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DtakoRowサービス - 運行データの管理
type DtakoRowServiceClient interface {
	// 運行データの詳細取得（view機能）
	GetRowDetail(ctx context.Context, in *GetRowDetailRequest, opts ...grpc.CallOption) (*GetRowDetailResponse, error)
	// 基本CRUD
	CreateRow(ctx context.Context, in *CreateRowRequest, opts ...grpc.CallOption) (*Row, error)
	GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*Row, error)
	UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*Row, error)
	DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error)
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
	// 検索
	SearchRows(ctx context.Context, in *SearchRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
	SearchByShaban(ctx context.Context, in *ShabanSearchRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
}

type dtakoRowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtakoRowServiceClient(cc grpc.ClientConnInterface) DtakoRowServiceClient {
	return &dtakoRowServiceClient{cc}
}

func (c *dtakoRowServiceClient) GetRowDetail(ctx context.Context, in *GetRowDetailRequest, opts ...grpc.CallOption) (*GetRowDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRowDetailResponse)
	err := c.cc.Invoke(ctx, DtakoRowService_GetRowDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) CreateRow(ctx context.Context, in *CreateRowRequest, opts ...grpc.CallOption) (*Row, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Row)
	err := c.cc.Invoke(ctx, DtakoRowService_CreateRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*Row, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Row)
	err := c.cc.Invoke(ctx, DtakoRowService_GetRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*Row, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Row)
	err := c.cc.Invoke(ctx, DtakoRowService_UpdateRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRowResponse)
	err := c.cc.Invoke(ctx, DtakoRowService_DeleteRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowService_ListRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) SearchRows(ctx context.Context, in *SearchRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowService_SearchRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowServiceClient) SearchByShaban(ctx context.Context, in *ShabanSearchRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowService_SearchByShaban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtakoRowServiceServer is the server API for DtakoRowService service.
// All implementations must embed UnimplementedDtakoRowServiceServer
// for forward compatibility.
//
// DtakoRowサービス - 運行データの管理
type DtakoRowServiceServer interface {
	// 運行データの詳細取得（view機能）
	GetRowDetail(context.Context, *GetRowDetailRequest) (*GetRowDetailResponse, error)
	// 基本CRUD
	CreateRow(context.Context, *CreateRowRequest) (*Row, error)
	GetRow(context.Context, *GetRowRequest) (*Row, error)
	UpdateRow(context.Context, *UpdateRowRequest) (*Row, error)
	DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error)
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
	// 検索
	SearchRows(context.Context, *SearchRowsRequest) (*ListRowsResponse, error)
	SearchByShaban(context.Context, *ShabanSearchRequest) (*ListRowsResponse, error)
	mustEmbedUnimplementedDtakoRowServiceServer()
}

// UnimplementedDtakoRowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtakoRowServiceServer struct{}

func (UnimplementedDtakoRowServiceServer) GetRowDetail(context.Context, *GetRowDetailRequest) (*GetRowDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRowDetail not implemented")
}
func (UnimplementedDtakoRowServiceServer) CreateRow(context.Context, *CreateRowRequest) (*Row, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRow not implemented")
}
func (UnimplementedDtakoRowServiceServer) GetRow(context.Context, *GetRowRequest) (*Row, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedDtakoRowServiceServer) UpdateRow(context.Context, *UpdateRowRequest) (*Row, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRow not implemented")
}
func (UnimplementedDtakoRowServiceServer) DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRow not implemented")
}
func (UnimplementedDtakoRowServiceServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}
func (UnimplementedDtakoRowServiceServer) SearchRows(context.Context, *SearchRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRows not implemented")
}
func (UnimplementedDtakoRowServiceServer) SearchByShaban(context.Context, *ShabanSearchRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByShaban not implemented")
}
func (UnimplementedDtakoRowServiceServer) mustEmbedUnimplementedDtakoRowServiceServer() {}
func (UnimplementedDtakoRowServiceServer) testEmbeddedByValue()                         {}

// UnsafeDtakoRowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtakoRowServiceServer will
// result in compilation errors.
type UnsafeDtakoRowServiceServer interface {
	mustEmbedUnimplementedDtakoRowServiceServer()
}

func RegisterDtakoRowServiceServer(s grpc.ServiceRegistrar, srv DtakoRowServiceServer) {
	// If the following call pancis, it indicates UnimplementedDtakoRowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DtakoRowService_ServiceDesc, srv)
}

func _DtakoRowService_GetRowDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).GetRowDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_GetRowDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).GetRowDetail(ctx, req.(*GetRowDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_CreateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).CreateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_CreateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).CreateRow(ctx, req.(*CreateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_GetRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).GetRow(ctx, req.(*GetRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_UpdateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).UpdateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_UpdateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).UpdateRow(ctx, req.(*UpdateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_DeleteRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).DeleteRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_DeleteRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).DeleteRow(ctx, req.(*DeleteRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_ListRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_SearchRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).SearchRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_SearchRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).SearchRows(ctx, req.(*SearchRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowService_SearchByShaban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShabanSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowServiceServer).SearchByShaban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowService_SearchByShaban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowServiceServer).SearchByShaban(ctx, req.(*ShabanSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtakoRowService_ServiceDesc is the grpc.ServiceDesc for DtakoRowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtakoRowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtako.DtakoRowService",
	HandlerType: (*DtakoRowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRowDetail",
			Handler:    _DtakoRowService_GetRowDetail_Handler,
		},
		{
			MethodName: "CreateRow",
			Handler:    _DtakoRowService_CreateRow_Handler,
		},
		{
			MethodName: "GetRow",
			Handler:    _DtakoRowService_GetRow_Handler,
		},
		{
			MethodName: "UpdateRow",
			Handler:    _DtakoRowService_UpdateRow_Handler,
		},
		{
			MethodName: "DeleteRow",
			Handler:    _DtakoRowService_DeleteRow_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _DtakoRowService_ListRows_Handler,
		},
		{
			MethodName: "SearchRows",
			Handler:    _DtakoRowService_SearchRows_Handler,
		},
		{
			MethodName: "SearchByShaban",
			Handler:    _DtakoRowService_SearchByShaban_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dtako_rows.proto",
}
