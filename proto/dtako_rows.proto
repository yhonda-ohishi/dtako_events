syntax = "proto3";

package dtako;

option go_package = "github.com/yhonda-ohishi/dtako_events/proto;dtako";

import "google/protobuf/timestamp.proto";

// DtakoRowサービス - 運行データの管理
service DtakoRowService {
  // 運行データの詳細取得（view機能）
  rpc GetRowDetail(GetRowDetailRequest) returns (GetRowDetailResponse);

  // 基本CRUD
  rpc CreateRow(CreateRowRequest) returns (Row);
  rpc GetRow(GetRowRequest) returns (Row);
  rpc UpdateRow(UpdateRowRequest) returns (Row);
  rpc DeleteRow(DeleteRowRequest) returns (DeleteRowResponse);
  rpc ListRows(ListRowsRequest) returns (ListRowsResponse);

  // 検索
  rpc SearchRows(SearchRowsRequest) returns (ListRowsResponse);
  rpc SearchByShaban(ShabanSearchRequest) returns (ListRowsResponse);
}

// GetRowDetail用のリクエスト
message GetRowDetailRequest {
  string id = 1; // 運行NO (dtako_row_id)
}

// GetRowDetail用のレスポンス（view機能の全データ）
message GetRowDetailResponse {
  // 運行データ本体
  Row dtako_row = 1;

  // イベントデータ
  repeated Event events = 2;

  // 積み・降しペア
  repeated TsumiOroshiPair tsumi_oroshi_pairs = 3;

  // 前後の運行データ
  Row dtako_last = 4;
  Row dtako_next = 5;

  // 次が降し最初かどうか
  Event is_next_oroshi_fst = 6;
  // 前が積み最後かどうか
  Event is_last_oroshi_last = 7;

  // ETCデータ（旧DtakoEtc）
  repeated EtcData detc = 8;

  // ETCデータ（新EtcMeisai）
  repeated EtcMeisaiData ddetc = 9;
  int32 ddetc_srch_count = 10;

  // フェリーデータ
  repeated FerryData dferry = 11;

  // 一番星データ
  repeated IchibanData ichi_r = 12;

  // 経費データ
  repeated KeihiData keihi = 13;

  // 売上経費データ
  repeated UriageKeihiData d_uriage = 14;

  // 料費データ
  repeated RyohiRow ryohi_rows = 15;

  // 燃料単価
  FuelTanka fuel_tanka = 16;

  // 積み降しイベント一覧
  repeated Event tsumi_oroshi = 17;
}

// 積み・降しペア
message TsumiOroshiPair {
  Event tsumi = 1;  // 積みイベント
  Event oroshi = 2; // 降しイベント
}

// 運行データ
message Row {
  string id = 1;                    // 主キー
  string unko_no = 2;               // 運行NO
  string shaban = 3;                // 車番（車輌CC）
  string driver_id = 4;             // 運転手ID（乗務員CD1）
  google.protobuf.Timestamp start_datetime = 5;  // 出庫日時
  google.protobuf.Timestamp end_datetime = 6;    // 帰庫日時
  double distance = 7;              // 走行距離
  double fuel_used = 8;             // 燃料使用量

  // 追加フィールド
  string sharyou_cc = 9;            // 車輌CC
  string jomuin_cd1 = 10;           // 乗務員CD1
  int32 taishou_jomuin_kubun = 11;  // 対象乗務員区分

  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;

  // リレーション
  repeated Event events = 30;
  Driver driver = 31;
}

// イベントデータ
message Event {
  string srch_id = 1;               // 主キー
  string event_type = 2;            // イベント名
  string unko_no = 3;               // 運行NO
  string driver_id = 4;             // 運転手ID
  google.protobuf.Timestamp start_datetime = 5;
  google.protobuf.Timestamp end_datetime = 6;
  double start_latitude = 7;
  double start_longitude = 8;
  string start_city_name = 9;
  double end_latitude = 10;
  double end_longitude = 11;
  string end_city_name = 12;

  // 追加フィールド
  string tokuisaki = 13;            // 得意先
  string biko = 14;                 // 備考

  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;

  // リレーション
  EventDetail detail = 30;
}

// イベント詳細
message EventDetail {
  string srch_id = 1;
  string biko = 2;  // 備考
}

// 運転手マスタ
message Driver {
  string code = 1;      // 社員コード
  string name = 2;      // 社員名
}

// ETCデータ（旧DtakoEtc）
message EtcData {
  string id = 1;
  string unko_no = 2;
  google.protobuf.Timestamp start_datetime = 3;
  google.protobuf.Timestamp end_datetime = 4;
  int32 etc = 5;

  // 積みデータのマップ（srch_id => 表示文字列）
  map<string, string> tsumi = 10;
}

// ETCデータ（新EtcMeisai）
message EtcMeisaiData {
  string id = 1;
  string dtako_row_id = 2;
  google.protobuf.Timestamp date_fr = 3;
  google.protobuf.Timestamp date_to = 4;
  int32 kingaku = 5;

  // 自社データかどうか（1=自社, 0=配車都合/乗務員都合）
  int32 jisha = 10;

  // 積みデータのマップ
  map<string, string> tsumi = 11;

  // 売上経費データ
  UriageKeihiData dtako_uriage_keihi = 12;
}

// フェリーデータ
message FerryData {
  string id = 1;
  string unko_no = 2;
  google.protobuf.Timestamp start_datetime = 3;
  google.protobuf.Timestamp end_datetime = 4;
  string ferry_name = 5;
  int32 kingaku = 6;
}

// 一番星データ
message IchibanData {
  string sharyou_cc = 1;            // 車輌CC
  string tsumikomi_ymd = 2;         // 積込年月日
  string unko_ymd = 3;              // 運行年月日
  string nounyuu_ymd = 4;           // 納入年月日
  string hatsuchi_n = 5;            // 発地N
  string chakuchi_n = 6;            // 着地N
  string hinmei_n = 7;              // 品名N
  string tokuisaki_n = 8;           // 得意先N
  string tokuisaki_cc = 9;          // 得意先CC
  string biko = 10;                 // 備考
  string biko2 = 11;                // 備考2
  int32 seikyu_k = 12;              // 請求K
  string shain_n = 13;              // 社員N（運転手）
  string untensh_c = 14;            // 運転手C
  int32 kingaku = 15;               // 金額
  int32 nebiki = 16;                // 値引
  int32 warimashi = 17;             // 割増
  int32 jippi = 18;                 // 実費
  string nyuuryoku_tantou_n = 19;   // 入力担当N
}

// 経費データ
message KeihiData {
  string sharyou_cc = 1;            // 車輌CC
  string unko_ymd = 2;              // 運行年月日
  string keijou_ymd = 3;            // 計上年月日
  double suuryou = 4;               // 数量
  double tanka = 5;                 // 単価
  int32 kingaku = 6;                // 金額
  string biko = 7;                  // 備考
  string keihi_n = 8;               // 経費N
  string keihi_c = 9;               // 経費C
  string miharai_saki_n = 10;       // 未払先N
}

// 売上経費データ
message UriageKeihiData {
  string srch_id = 1;
  string dtako_row_id = 2;
  int32 keihi_c = 3;
  google.protobuf.Timestamp datetime = 4;
  int32 kingaku = 5;

  // 子データ
  repeated UriageKeihiChild children = 10;
}

// 売上経費子データ
message UriageKeihiChild {
  string id = 1;
  string parent_srch_id = 2;
  string dtako_row_id = 3;
}

// 料費データ
message RyohiRow {
  uint32 id = 1;
  string unko_no = 2;
  string tsumi_date = 3;
  string oroshi_date = 4;
  string tokuisaki = 5;
  string status = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// 燃料単価
message FuelTanka {
  int32 month_int = 1;  // 月（yyMM形式の整数）
  double tanka = 2;     // 単価
}

// 基本CRUD用のメッセージ
message CreateRowRequest {
  Row row = 1;
}

message GetRowRequest {
  string id = 1;
}

message UpdateRowRequest {
  Row row = 1;
}

message DeleteRowRequest {
  string id = 1;
}

message DeleteRowResponse {
  bool success = 1;
}

message ListRowsRequest {
  int32 page = 1;
  int32 page_size = 2;
  string filter = 3;
}

message ListRowsResponse {
  repeated Row rows = 1;
  int32 total = 2;
}

message SearchRowsRequest {
  google.protobuf.Timestamp date_from = 1;
  google.protobuf.Timestamp date_to = 2;
  string driver_id = 3;
  string shaban = 4;
}

message ShabanSearchRequest {
  string shaban = 1;
  google.protobuf.Timestamp date_from = 2;
  google.protobuf.Timestamp date_to = 3;
}